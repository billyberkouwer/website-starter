{
  "rules": [
    {
      "id": "typescript-strict",
      "description": "Always use TypeScript with strict type checking enabled. Avoid using 'any' unless absolutely necessary.",
      "files": ["**/*.ts", "**/*.tsx"]
    },
    {
      "id": "component-structure",
      "description": "Organize UI code into reusable, self-contained components. Each component should have its own directory with related files (TSX, SCSS, assets).",
      "files": ["src/components/**"]
    },
    {
      "id": "scss-modules",
      "description": "Use SCSS modules for component styles. Prefer BEM naming and utility classes. Avoid global styles except for resets, variables, and typography.",
      "files": ["src/**/*.scss"]
    },
    {
      "id": "app-directory-structure",
      "description": "Follow Next.js app directory conventions. Use (feature) folders for logical separation, and keep API routes under 'api/'.",
      "files": ["src/app/**"]
    },
    {
      "id": "sanity-integration",
      "description": "Keep all Sanity schemas, queries, and helpers under 'src/sanity/'. Use strong typing for all Sanity data.",
      "files": ["src/sanity/**"]
    },
    {
      "id": "helpers-hooks-utils",
      "description": "Place generic helpers, hooks, and utility functions in their respective folders. Keep them pure and reusable.",
      "files": ["src/helpers/**", "src/hooks/**", "src/utils/**"]
    },
    {
      "id": "types-location",
      "description": "Define shared TypeScript types in 'src/types/'. Co-locate component-specific types with the component.",
      "files": ["src/types/**"]
    },
    {
      "id": "eslint-prettier",
      "description": "Enforce code style and quality with ESLint and Prettier. Fix all lint and format errors before committing.",
      "files": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.scss"]
    },
    {
      "id": "semantic-accessible-html",
      "description": "Use semantic HTML elements and ensure accessibility (a11y) best practices in all components.",
      "files": ["src/components/**", "src/app/**"]
    },
    {
      "id": "modern-js-features",
      "description": "Prefer modern JavaScript/TypeScript features (e.g., optional chaining, nullish coalescing, async/await). Avoid legacy patterns.",
      "files": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
    },
    {
      "id": "no-magic-values",
      "description": "Avoid magic numbers/strings. Use constants or enums for repeated values.",
      "files": ["**/*.ts", "**/*.tsx"]
    },
    {
      "id": "readme-and-docs",
      "description": "Maintain a clear and up-to-date README.md. Document any non-obvious code or architectural decisions.",
      "files": ["README.md"]
    },
    {
      "id": "studio-website-structure",
      "description": "Organize Next.js app directory with separate (studio) and (website) folders under src/app. Place all Sanity Studio code in (studio) and all website code in (website).",
      "files": ["src/app/(studio)/**", "src/app/(website)/**"]
    },
    {
      "id": "api-route-conventions",
      "description": "API routes for revalidation and Sanity live editing should be placed under src/app/api/. Use clear subfolders for each feature (e.g., revalidate, draft-mode).",
      "files": ["src/app/api/**"]
    }
  ]
} 